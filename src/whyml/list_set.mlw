module ListSet

 use list.List
 use list.Append
 use list.Mem
 use list.Quant
 use list.Elements
 use set.Fset

 let rec function contains (eq : 'a -> 'a -> bool) (x : 'a) (l : list 'a) : bool
  ensures { result <-> (exists y. Fset.mem x (elements l) && eq x y) }
  =
  Quant.mem eq x l

 let function add (eq : 'a -> 'a -> bool) (l : list 'a) (x : 'a) : list 'a
  ensures { exists y. Fset.mem y (elements result) && eq x y }
  =
   if contains eq x l then l else (Cons x l)

 let rec function remove (eq : 'a -> 'a -> bool) (l : list 'a) (x : 'a) : list 'a 
  =
  match l with
  | Nil -> Nil
  | Cons a l0 ->
    if eq x a then l0 else remove eq l0 x
  end

end
